#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.6
#  in conjunction with Tcl version 8.6
#    Oct 20, 2023 06:40:17 PM +07  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_script = sys.argv[0]
_location = os.path.dirname(_script)

import aprstday_support

_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
_fgcolor = '#000000'  # X11 color: 'black'
_compcolor = 'gray40' # X11 color: #666666
_ana1color = '#c3c3c3' # Closest X11 color: 'gray76'
_ana2color = 'beige' # X11 color: #f5f5dc
_tabfg1 = 'black' 
_tabfg2 = 'black' 
_tabbg1 = 'grey75' 
_tabbg2 = 'grey89' 
_bgmode = 'light' 

class TopLevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("777x582+253+52")
        top.minsize(120, 1)
        top.maxsize(1284, 1005)
        top.resizable(1,  1)
        top.title("APRSTHURSDAY")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.top = top

        self.Frame1 = tk.Frame(self.top)
        self.Frame1.place(relx=0.033, rely=0.022, relheight=0.278
                , relwidth=0.375)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#d9d9d9")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")
        self.TextKissIp = tk.Text(self.Frame1)
        self.TextKissIp.place(relx=0.488, rely=0.08, relheight=0.153
                , relwidth=0.464)
        self.TextKissIp.configure(background="white")
        self.TextKissIp.configure(font="TkTextFont")
        self.TextKissIp.configure(foreground="black")
        self.TextKissIp.configure(highlightbackground="#d9d9d9")
        self.TextKissIp.configure(highlightcolor="black")
        self.TextKissIp.configure(insertbackground="black")
        self.TextKissIp.configure(relief="solid")
        self.TextKissIp.configure(selectbackground="#c4c4c4")
        self.TextKissIp.configure(selectforeground="black")
        self.TextKissIp.configure(wrap="word")
        self.TextKissPort = tk.Text(self.Frame1)
        self.TextKissPort.place(relx=0.488, rely=0.401, relheight=0.153
                , relwidth=0.464)
        self.TextKissPort.configure(background="white")
        self.TextKissPort.configure(font="TkTextFont")
        self.TextKissPort.configure(foreground="black")
        self.TextKissPort.configure(highlightbackground="#d9d9d9")
        self.TextKissPort.configure(highlightcolor="black")
        self.TextKissPort.configure(insertbackground="black")
        self.TextKissPort.configure(relief="solid")
        self.TextKissPort.configure(selectbackground="#c4c4c4")
        self.TextKissPort.configure(selectforeground="black")
        self.TextKissPort.configure(wrap="word")
        self.Button1 = tk.Button(self.Frame1)
        self.Button1.place(relx=0.488, rely=0.722, height=24, width=97)
        self.Button1.configure(activebackground="beige")
        self.Button1.configure(activeforeground="black")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(command=aprstday_support.Connect)
        self.Button1.configure(compound='left')
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Connect''')
        self.Label1 = tk.Label(self.Frame1)
        self.Label1.place(relx=0.230, rely=0.08, height=27, width=69)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(compound='left')
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(justify='right')
        self.Label1.configure(text='''KISS IP :''')
        self.Label2 = tk.Label(self.Frame1)
        self.Label2.place(relx=0.170, rely=0.401, height=27, width=70)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(anchor='w')
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(compound='left')
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(justify='right')
        self.Label2.configure(text='''KISS PORT :''')
        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.Frame2 = tk.Frame(self.top)
        self.Frame2.place(relx=0.417, rely=0.022, relheight=0.278
                , relwidth=0.559)
        self.Frame2.configure(relief='groove')
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief="groove")
        self.Frame2.configure(background="#d9d9d9")
        self.Frame2.configure(highlightbackground="#d9d9d9")
        self.Frame2.configure(highlightcolor="black")
        self.TextMessages = tk.Text(self.Frame2)
        self.TextMessages.place(relx=0.27, rely=0.16, relheight=0.153
                , relwidth=0.698)
        self.TextMessages.configure(background="white")
        self.TextMessages.configure(font="TkTextFont")
        self.TextMessages.configure(foreground="black")
        self.TextMessages.configure(highlightbackground="#d9d9d9")
        self.TextMessages.configure(highlightcolor="black")
        self.TextMessages.configure(insertbackground="black")
        self.TextMessages.configure(relief="solid")
        self.TextMessages.configure(selectbackground="#c4c4c4")
        self.TextMessages.configure(selectforeground="black")
        self.TextMessages.configure(wrap="word")
        self.TextBeacon = tk.Text(self.Frame2)
        self.TextBeacon.place(relx=0.27, rely=0.562, relheight=0.153
                , relwidth=0.698)
        self.TextBeacon.configure(background="white")
        self.TextBeacon.configure(font="TkTextFont")
        self.TextBeacon.configure(foreground="black")
        self.TextBeacon.configure(highlightbackground="#d9d9d9")
        self.TextBeacon.configure(highlightcolor="black")
        self.TextBeacon.configure(insertbackground="black")
        self.TextBeacon.configure(relief="solid")
        self.TextBeacon.configure(selectbackground="#c4c4c4")
        self.TextBeacon.configure(selectforeground="black")
        self.TextBeacon.configure(wrap="word")
        self.Label3 = tk.Label(self.Frame2)
        self.Label3.place(relx=0.03, rely=0.14, height=27, width=83)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(anchor='w')
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(compound='left')
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''Messages :''')
        self.Label4 = tk.Label(self.Frame2)
        self.Label4.place(relx=0.06, rely=0.550, height=27, width=70)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(anchor='w')
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(compound='left')
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(text='''Beacon :''')
        self.Button2 = tk.Button(self.top)
        self.Button2.place(relx=0.667, rely=0.333, height=24, width=167)
        self.Button2.configure(activebackground="beige")
        self.Button2.configure(activeforeground="black")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(command=aprstday_support.SendMesg)
        self.Button2.configure(compound='left')
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Send Messages''')
        self.TextBeaconInterval = tk.Text(self.top)
        self.TextBeaconInterval.place(relx=0.533, rely=0.333, relheight=0.043
                , relwidth=0.107)
        self.TextBeaconInterval.configure(background="white")
        self.TextBeaconInterval.configure(font="TkTextFont")
        self.TextBeaconInterval.configure(foreground="black")
        self.TextBeaconInterval.configure(highlightbackground="#d9d9d9")
        self.TextBeaconInterval.configure(highlightcolor="black")
        self.TextBeaconInterval.configure(insertbackground="black")
        self.TextBeaconInterval.configure(relief="solid")
        self.TextBeaconInterval.configure(selectbackground="#c4c4c4")
        self.TextBeaconInterval.configure(selectforeground="black")
        self.TextBeaconInterval.configure(wrap="word")
        self.Label5 = tk.Label(self.top)
        self.Label5.place(relx=0.432, rely=0.320, height=40, width=70)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(anchor='w')
        self.Label5.configure(background="#d9d9d9")
        self.Label5.configure(compound='left')
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(highlightbackground="#d9d9d9")
        self.Label5.configure(highlightcolor="black")
        self.Label5.configure(text='''Interval :''')
        self.Label6 = tk.Label(self.top)
        self.Label6.place(relx=0.033, rely=0.333, height=27, width=83)
        self.Label6.configure(activebackground="#f9f9f9")
        self.Label6.configure(anchor='w')
        self.Label6.configure(background="#d9d9d9")
        self.Label6.configure(compound='left')
        self.Label6.configure(disabledforeground="#a3a3a3")
        self.Label6.configure(foreground="#000000")
        self.Label6.configure(highlightbackground="#d9d9d9")
        self.Label6.configure(highlightcolor="black")
        self.Label6.configure(text='''Logs''')
        #self.Text1 = tk.Text(self.top)
        self.Text1 = ScrolledText(self.top)
        self.Text1.place(relx=0.026, rely=0.395, relheight=0.557, relwidth=0.950)

        self.Text1.configure(background="white")
        self.Text1.configure(font="TkTextFont")
        self.Text1.configure(foreground="black")
        self.Text1.configure(highlightbackground="#d9d9d9")
        self.Text1.configure(highlightcolor="black")
        self.Text1.configure(insertbackground="black")
        self.Text1.configure(relief="solid")
        self.Text1.configure(selectbackground="#c4c4c4")
        self.Text1.configure(selectforeground="black")
        self.Text1.configure(wrap="word")
        
# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

def start_up():
    aprstday_support.main()

if __name__ == '__main__':
    aprstday_support.main()




